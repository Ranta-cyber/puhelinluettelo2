{"version":3,"sources":["notes.js","index.js"],"names":["baseUrl","nameObject","axios","post","then","response","data","get","put","id","delete","App","useState","persons","setPersons","newName","setNewName","newNumber","setNewNumber","newRajaus","setNewRajaus","errorMessage","setErrorMessage","formStyle","color","backgroundImage","Notification","message","className","useEffect","PersonService","returnedPersons","Persons","listItems","map","personList","i","key","name","number","type","onClick","event","deletePerson","filterItems","preventDefault","error","setTimeout","filter","n","catch","finally","arr","query","el","toLowerCase","indexOf","style","value","onChange","target","onSubmit","index","findIndex","name1","date","Date","toISOString","returnedPerson","concat","window","confirm","listItems3","console","log","alert","newrajaus","ihmiset","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.09871030.chunk.js","sourcesContent":["//import react from 'react';\nimport axios from 'axios';\n//const baseUrl ='http://localhost:3001/api/persons';\n//const baseUrl ='https://guarded-mountain-62659.herokuapp.com/api/persons';\n//Koska tässä tapauksessa sekä frontend että backend \n//toimivat samassa osoitteessa, voidaan React-sovelluksessa eli \n//frontendin koodissa oleva palvelimen baseUrl määritellä \n//suhteellisena URL:ina\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n  }\n\nconst addNote = (nameObject) => {   \n    const request = axios.post(baseUrl, nameObject)\n    return request.then(response => response.data)\n  }\n\n  const updateNote = (nameObject) => {\n      //console.log('id:',nameObject.id)\n    const request = axios.put(`${baseUrl}/${nameObject.id}`, nameObject)\n    return request.then(response => response.data)\n  }\n\n  \n\n  const deleteNote = (id) => {\n      //console.log('deletessä id :',id)\n      const request = axios.delete(`${baseUrl}/${id}`)\n      //return request.then(response => response.data)\n      return request.then(response => response.data)\n\n    //   .then(res => {\n    //     console.log(res.data);\n    // })\n    // .catch((err) => {\n    //     console.log(err);\n    // })\n  }\n\nexport default { addNote, \n                getAll, \n                updateNote,\n                deleteNote}","import React, { useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\n//import axios from 'axios';\nimport PersonService from './notes';\nimport './index.css'\n//import {  } from '@testing-library/react';\n//const baseurl ='http://localhost:3001/persons'\n\n//import './index.css';\n//import App from './App';\n//import * as serviceWorker from './serviceWorker';\n\nconst App = () => {\n  const [persons, setPersons] = useState([])\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ newRajaus, setNewRajaus ] = useState('')\n  const [errorMessage, setErrorMessage] = useState(null)\n\n  // const deleteButton = (id) => {\n  //   return( \n  //       <button name={id} type=\"button\" onClick={event => deletePerson(event, id)}> delete \n  //       </button>\n  //   )}\n\n\n  const backPhoto = 'https://cdn.pixabay.com/photo/2018/04/07/08/28/notepad-3297994_1280.jpg'\n\n  var formStyle = {\n    color: 'white',\n    backgroundImage: 'url(' + backPhoto + ')'\n  };\n\n  \n\n  const Notification = ({ message }) => {\n    if (message === null) {\n      return null\n    }\n  \n    return (\n      <div className=\"error\">\n        {message}\n      </div>\n    )\n  }\n\n  const hook = () => {\n    PersonService\n      .getAll()\n      .then(returnedPersons => {setPersons(returnedPersons)})  \n  }\n\n  useEffect(hook, [])\n\n  const Persons = () => { \n    if (newRajaus === '') \n    { const listItems = persons.map((personList, i) => \n      // <li key={i} id={i}>{personList.name} {personList.number} {deleteButton(personList.id)}</li>)\n      <li key={i} id={i}>{personList.name} {personList.number}   \n        <button name={personList.number} type=\"button\" onClick={event => deletePerson(event, personList.id, i)}> delete \n        </button>\n      </li>) \n      return( <ul id=\"choiceList\">{listItems}</ul>)\n    }\n    else \n    {\n      const listItems = filterItems(persons, newRajaus)\n          .map((personList, i) => \n            //<li key={i} id={i}>{personList.name} {personList.number} {deleteButton(personList.id)} \n      <li key={i} id={i}>{personList.name} {personList.number}   \n        <button name={personList.number} type=\"button\" onClick={event => deletePerson(event, personList.id, i)}> delete \n        </button>\n      </li>)\n           \n      return(<ul id=\"choiceList\">{listItems}</ul>)\n    }\n  }\n  // const RemoveFromList = (itemid) => {\n  //   var element = document.getElementById( itemid );\n  //   element.parentNode.removeChild(element);\n  // }\n\n  const deletePerson = (event, id, i) => {\n    event.preventDefault()\n    //console.log('delete person id:', id)\n    PersonService\n    .deleteNote(id)\n    .then(error => { setErrorMessage(\n      `Note '${persons[0].name}' is removed from server`\n    )\n    setTimeout(() => {\n      setErrorMessage(null)\n    }, 5000)\n    setPersons(persons.filter(n => n.id !== id))})\n    \n      .catch(error => {\n        setErrorMessage(\n          `Note '${persons[i].name}' was already removed from server`\n        )\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)})\n      .finally()\n        \n  }\n  \n  const AddPerson = (event) => {\n    event.preventDefault()\n    const index = persons.findIndex(name1 => name1.name === newName)\n  \n    if (index < 0) {\n\n      const nameObject = {\n          name: newName,\n          number: newNumber,\n          date: new Date().toISOString()}\n          //important: Math.random() > 0.5}\n      PersonService\n          .addNote(nameObject)\n          .then(returnedPerson => {setPersons(persons.concat          (returnedPerson))\n            \n              setNewName('')\n              setNewNumber('')  \n              },\n              setErrorMessage(\n                `Note '${newName}' is added.`\n              ),\n              setTimeout(() => {\n                setErrorMessage(null)\n              }, 5000),\n          )\n    } else {\n      if (window.confirm(`${newName} is already added to phonebook, \\nreplace the old number with a new one?`) === true)\n        {\n          const listItems3 = filterItems(persons, newName)\n          \n          const nameObject = {\n            name: newName,\n            number: newNumber,\n            date: new Date().toISOString(),\n            id: listItems3[0].id}\n\n            console.log('newname,newnumber,id:',newName, newNumber, listItems3[0].id)\n            \n            PersonService\n              .updateNote(nameObject)\n              .then(error =>\n                setErrorMessage(\n                  `Note '${nameObject.name}' is updated.`\n                ),\n                setTimeout(() => {\n                  setErrorMessage(null)\n                }, 5000),\n                persons[index].number = newNumber\n                )\n                .catch(error => {\n                  alert(\n                    `the note '${nameObject.name}' was already deleted from server`\n                  )\n                  setPersons(persons.filter(n => n.id !== nameObject.id))\n                })\n              \n            setNewName('')\n            setNewNumber('')         \n        }\n      }\n  }\n\n  const handleRajausChange = (event) => {\n    event.preventDefault();\n    setNewRajaus(event.target.value)\n  }\n  \n  const handlePersonChange = (event) => {\n    //console.log('event', event.target.value)\n    event.preventDefault();\n    setNewName(event.target.value)\n  }\n  \n  const handleNumberChange = (event) => {\n    event.preventDefault();\n    setNewNumber(event.target.value)\n  }\n  \n  const filterItems = (arr, query) => {\n    return arr.filter(el => \n      el.name.toLowerCase().indexOf(query.toLowerCase()) !== -1)\n  }\n  \n  return (\n    <div style={formStyle}>\n      <h2>Phonebook</h2>\n      <Notification message={errorMessage} />\n      <div>\n           Filter shown with: <input value={newRajaus}\n           onChange={handleRajausChange}/>\n      </div>\n       \n      <h3>Add a new</h3>\n\n      <div>\n      <form onSubmit={AddPerson}> \n        <div>\n          Name: <input value={newName}\n          onChange={handlePersonChange}/>\n        </div>\n        <div>\n          Number: <input value={newNumber}\n          onChange={handleNumberChange}/>\n        </div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n      </div>\n\n      <h3>Numbers</h3>\n\n      <Persons newrajaus={newRajaus} ihmiset={persons}/>\n      \n    </div>\n  )\n}\n\nReactDOM.render(\n  //<React.StrictMode>\n    <App />,\n  //</React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"],"sourceRoot":""}